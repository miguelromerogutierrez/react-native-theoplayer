{"version":3,"names":["fromNativeCue","cue","id","uid","startTime","endTime","content","fromNativeTextTrack","track","kind","label","language","mode","type","src","forced","cues","map","fromNativeMediaTrack","activeQuality","qualities","targetQuality","findNativeQualityByUid","mediaTrack","find","quality","findNativeQualitiesByUid","Array","isArray","filter","includes","undefined"],"sources":["TrackUtils.ts"],"sourcesContent":["import type {\n  TextTrackCue as NativeTextTrackCue,\n  TextTrack as NativeTextTrack,\n  MediaTrack as NativeMediaTrack,\n  Quality as NativeQuality,\n} from 'theoplayer';\nimport type { TextTrack, TextTrackCue, MediaTrack } from 'react-native-theoplayer';\n\nexport function fromNativeCue(cue: NativeTextTrackCue): TextTrackCue {\n  return {\n    id: cue.id,\n    uid: cue.uid,\n    startTime: 1e3 * cue.startTime,\n    endTime: 1e3 * cue.endTime,\n    content: cue.content,\n  } as TextTrackCue;\n}\n\nexport function fromNativeTextTrack(track: NativeTextTrack): TextTrack {\n  const { id, uid, kind, label, language, mode, type, src, forced } = track;\n\n  return {\n    id,\n    uid,\n    kind,\n    label,\n    language,\n    mode,\n    type,\n    src,\n    forced,\n    cues: track.cues ? track.cues.map((cue) => fromNativeCue(cue)) : [],\n  } as TextTrack;\n}\n\nexport function fromNativeMediaTrack(track: NativeMediaTrack): MediaTrack {\n  const { id, uid, kind, label, language, activeQuality, qualities, targetQuality } = track;\n\n  return {\n    kind,\n    label,\n    language,\n    id,\n    uid,\n    activeQuality,\n    qualities,\n    targetQuality,\n  } as MediaTrack;\n}\n\nexport function findNativeQualityByUid(mediaTrack: NativeMediaTrack, uid: number | undefined): NativeQuality | undefined {\n  return mediaTrack.qualities.find((quality) => quality.uid === uid);\n}\n\nexport function findNativeQualitiesByUid(mediaTrack: NativeMediaTrack | undefined, uid: number | number[] | undefined): NativeQuality[] | undefined {\n  if (uid && mediaTrack) {\n    if (Array.isArray(uid)) {\n      return mediaTrack.qualities.filter((quality) => uid.includes(quality.uid));\n    } else {\n      const quality = findNativeQualityByUid(mediaTrack, uid);\n      return quality ? [quality] : undefined;\n    }\n  }\n  return undefined;\n}\n"],"mappings":";;;;;;;;;;;AAQO,SAASA,aAAT,CAAuBC,GAAvB,EAA8D;EACnE,OAAO;IACLC,EAAE,EAAED,GAAG,CAACC,EADH;IAELC,GAAG,EAAEF,GAAG,CAACE,GAFJ;IAGLC,SAAS,EAAE,MAAMH,GAAG,CAACG,SAHhB;IAILC,OAAO,EAAE,MAAMJ,GAAG,CAACI,OAJd;IAKLC,OAAO,EAAEL,GAAG,CAACK;EALR,CAAP;AAOD;;AAEM,SAASC,mBAAT,CAA6BC,KAA7B,EAAgE;EACrE,MAAM;IAAEN,EAAF;IAAMC,GAAN;IAAWM,IAAX;IAAiBC,KAAjB;IAAwBC,QAAxB;IAAkCC,IAAlC;IAAwCC,IAAxC;IAA8CC,GAA9C;IAAmDC;EAAnD,IAA8DP,KAApE;EAEA,OAAO;IACLN,EADK;IAELC,GAFK;IAGLM,IAHK;IAILC,KAJK;IAKLC,QALK;IAMLC,IANK;IAOLC,IAPK;IAQLC,GARK;IASLC,MATK;IAULC,IAAI,EAAER,KAAK,CAACQ,IAAN,GAAaR,KAAK,CAACQ,IAAN,CAAWC,GAAX,CAAgBhB,GAAD,IAASD,aAAa,CAACC,GAAD,CAArC,CAAb,GAA2D;EAV5D,CAAP;AAYD;;AAEM,SAASiB,oBAAT,CAA8BV,KAA9B,EAAmE;EACxE,MAAM;IAAEN,EAAF;IAAMC,GAAN;IAAWM,IAAX;IAAiBC,KAAjB;IAAwBC,QAAxB;IAAkCQ,aAAlC;IAAiDC,SAAjD;IAA4DC;EAA5D,IAA8Eb,KAApF;EAEA,OAAO;IACLC,IADK;IAELC,KAFK;IAGLC,QAHK;IAILT,EAJK;IAKLC,GALK;IAMLgB,aANK;IAOLC,SAPK;IAQLC;EARK,CAAP;AAUD;;AAEM,SAASC,sBAAT,CAAgCC,UAAhC,EAA8DpB,GAA9D,EAAkH;EACvH,OAAOoB,UAAU,CAACH,SAAX,CAAqBI,IAArB,CAA2BC,OAAD,IAAaA,OAAO,CAACtB,GAAR,KAAgBA,GAAvD,CAAP;AACD;;AAEM,SAASuB,wBAAT,CAAkCH,UAAlC,EAA4EpB,GAA5E,EAA6I;EAClJ,IAAIA,GAAG,IAAIoB,UAAX,EAAuB;IACrB,IAAII,KAAK,CAACC,OAAN,CAAczB,GAAd,CAAJ,EAAwB;MACtB,OAAOoB,UAAU,CAACH,SAAX,CAAqBS,MAArB,CAA6BJ,OAAD,IAAatB,GAAG,CAAC2B,QAAJ,CAAaL,OAAO,CAACtB,GAArB,CAAzC,CAAP;IACD,CAFD,MAEO;MACL,MAAMsB,OAAO,GAAGH,sBAAsB,CAACC,UAAD,EAAapB,GAAb,CAAtC;MACA,OAAOsB,OAAO,GAAG,CAACA,OAAD,CAAH,GAAeM,SAA7B;IACD;EACF;;EACD,OAAOA,SAAP;AACD"}