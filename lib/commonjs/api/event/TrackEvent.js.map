{"version":3,"names":["TrackListEventType","TextTrackEventType","MediaTrackType","MediaTrackEventType"],"sources":["TrackEvent.ts"],"sourcesContent":["import type { TextTrack } from '../track/TextTrack';\nimport type { TextTrackCue } from '../track/TextTrackCue';\nimport type { MediaTrack } from '../track/MediaTrack';\nimport type { Quality } from '../track/Quality';\n\nexport enum TrackListEventType {\n  /**\n   * Dispatched when track has been added to the track list.\n   */\n  AddTrack,\n\n  /**\n   * Dispatched when track has been removed from the track list.\n   */\n  RemoveTrack,\n\n  /**\n   * Fired when a track has been changed.\n   */\n  ChangeTrack,\n}\n\nexport interface TrackListEvent {\n  /**\n   * The type of track list event.\n   */\n  readonly type: TrackListEventType;\n}\n\nexport interface TextTrackListEvent extends TrackListEvent {\n  /**\n   * The relevant text track.\n   */\n  readonly track: TextTrack;\n}\n\nexport enum TextTrackEventType {\n  /**\n   * Dispatched when cue has been added to the text track.\n   */\n  AddCue,\n\n  /**\n   * Dispatched when cue has been removed from the text track.\n   */\n  RemoveCue,\n}\n\nexport interface TextTrackEvent {\n  /**\n   * The type of text track event.\n   */\n  readonly type: TextTrackEventType;\n\n  /**\n   * The text track's uid to which this cue belongs.\n   */\n  readonly trackUid: number;\n\n  /**\n   * The text track's cue.\n   */\n  readonly cue: TextTrackCue;\n}\n\nexport enum MediaTrackType {\n  Audio,\n\n  Video,\n}\n\nexport interface MediaTrackListEvent extends TrackListEvent {\n  /**\n   * The relevant media track type, either {@link MediaTrackType.Audio} or {@link MediaTrackType.Video}.\n   */\n  readonly trackType: MediaTrackType;\n\n  /**\n   * The relevant media track.\n   */\n  readonly track: MediaTrack;\n}\n\nexport enum MediaTrackEventType {\n  /**\n   * Dispatched when the media track's active quality changes.\n   */\n  ActiveQualityChanged,\n}\n\nexport interface MediaTrackEvent {\n  /**\n   * The type of media track event.\n   */\n  readonly type: MediaTrackEventType;\n\n  /**\n   * The media track's type to which event belongs, either {@link MediaTrackType.Audio} or {@link MediaTrackType.Video}.\n   */\n  readonly trackType: MediaTrackType;\n\n  /**\n   * The media track's uid to which event belongs.\n   */\n  readonly trackUid: number;\n\n  /**\n   * The affected media track's qualities.\n   */\n  readonly qualities?: Quality | Quality[];\n}\n"],"mappings":";;;;;;IAKYA,kB;;;WAAAA,kB;EAAAA,kB,CAAAA,kB;EAAAA,kB,CAAAA,kB;EAAAA,kB,CAAAA,kB;GAAAA,kB,kCAAAA,kB;;IA+BAC,kB;;;WAAAA,kB;EAAAA,kB,CAAAA,kB;EAAAA,kB,CAAAA,kB;GAAAA,kB,kCAAAA,kB;;IA6BAC,c;;;WAAAA,c;EAAAA,c,CAAAA,c;EAAAA,c,CAAAA,c;GAAAA,c,8BAAAA,c;;IAkBAC,mB;;;WAAAA,mB;EAAAA,mB,CAAAA,mB;GAAAA,mB,mCAAAA,mB"}