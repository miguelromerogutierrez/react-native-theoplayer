{"version":3,"names":["NativeEventEmitter","NativeModules","fromNativeLicenseRequest","toNativeLicenseRequest","fromNativeLicenseResponse","toNativeLicenseResponseResult","fromNativeCertificateRequest","toNativeCertificateRequest","fromNativeCertificateResponse","toNativeCertificateResponseResult","isBufferSource","NativeContentProtectionRegistry","constructor","undefined","event","requestId","integrationId","keySystemId","drmConfig","console","log","factory","getFactory","currentIntegration","integration","build","ContentProtectionModule","onBuildProcessed","resultString","request","getIntegration","onCertificateRequest","result","nativeResponse","onCertificateRequestProcessedAsCertificate","modifiedNativeRequest","onCertificateRequestProcessedAsRequest","response","onCertificateResponse","responseResult","modifiedNativeResponse","onCertificateResponseProcessed","onLicenseRequest","onLicenseRequestProcessedAsLicense","onLicenseRequestProcessedAsRequest","onLicenseResponse","onLicenseResponseProcessed","fairplaySkdUrl","extractFairplayContentId","contentId","onExtractFairplayContentIdProcessed","emitter","addListener","onBuildIntegrationRequest","onExtractFairplayContentId","registerContentProtectionIntegration","integrationFactory","registeredFactories","push","find","init","ContentProtectionRegistry"],"sources":["ContentProtectionRegistry.ts"],"sourcesContent":["import type { CertificateRequest, ContentProtectionAPI, DRMConfiguration, LicenseRequest } from 'react-native-theoplayer';\nimport type { KeySystemId } from 'react-native-theoplayer';\nimport type { ContentProtectionIntegrationFactory } from 'react-native-theoplayer';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nimport type { ContentProtectionIntegration } from 'react-native-theoplayer';\nimport type { NativeContentProtectionEvent } from './NativeContentProtectionEvent';\nimport { fromNativeLicenseRequest, NativeLicenseRequest, toNativeLicenseRequest } from './NativeLicenseRequest';\nimport { fromNativeLicenseResponse, NativeLicenseResponse, toNativeLicenseResponseResult } from './NativeLicenseResponse';\nimport { fromNativeCertificateRequest, NativeCertificateRequest, toNativeCertificateRequest } from './NativeCertificateRequest';\nimport { fromNativeCertificateResponse, NativeCertificateResponse, toNativeCertificateResponseResult } from './NativeCertificateResponse';\nimport { isBufferSource } from '../utils/TypeUtils';\n\ninterface WrappedContentProtectionIntegrationFactory {\n  integrationId: string;\n  keySystemId: string;\n  integrationFactory: ContentProtectionIntegrationFactory;\n}\n\ninterface WrappedContentProtectionIntegration {\n  integrationId: string;\n  keySystemId: string;\n  integration: ContentProtectionIntegration;\n}\n\ninterface BuildEvent extends NativeContentProtectionEvent {\n  drmConfig: DRMConfiguration;\n}\n\ninterface ExtractFaiplayContentIdEvent extends NativeContentProtectionEvent {\n  fairplaySkdUrl: string;\n}\n\nexport class NativeContentProtectionRegistry implements ContentProtectionAPI {\n  private emitter: NativeEventEmitter;\n  private registeredFactories: WrappedContentProtectionIntegrationFactory[] = [];\n  private currentIntegration: WrappedContentProtectionIntegration | undefined = undefined;\n\n  constructor() {\n    this.emitter = new NativeEventEmitter(NativeModules.ContentProtectionModule);\n    this.emitter.addListener('onBuildIntegration', this.onBuildIntegrationRequest);\n    this.emitter.addListener('onCertificateRequest', this.onCertificateRequest);\n    this.emitter.addListener('onCertificateResponse', this.onCertificateResponse);\n    this.emitter.addListener('onLicenseRequest', this.onLicenseRequest);\n    this.emitter.addListener('onLicenseResponse', this.onLicenseResponse);\n    this.emitter.addListener('onExtractFairplayContentId', this.onExtractFairplayContentId);\n  }\n\n  registerContentProtectionIntegration(integrationId: string, keySystemId: KeySystemId, integrationFactory: ContentProtectionIntegrationFactory) {\n    this.registeredFactories.push({\n      integrationId,\n      keySystemId,\n      integrationFactory,\n    });\n    NativeModules.ContentProtectionModule.registerContentProtectionIntegration(integrationId, keySystemId);\n  }\n\n  private getFactory(integrationId: string, keySystemId: string): ContentProtectionIntegrationFactory | undefined {\n    return this.registeredFactories.find((init) => init.integrationId === integrationId && init.keySystemId === keySystemId)?.integrationFactory;\n  }\n\n  private getIntegration(integrationId: string, keySystemId: string): ContentProtectionIntegration | undefined {\n    return this.currentIntegration?.integrationId === integrationId && this.currentIntegration?.keySystemId === keySystemId\n      ? this.currentIntegration?.integration\n      : undefined;\n  }\n\n  private onBuildIntegrationRequest = (event: BuildEvent) => {\n    const { requestId, integrationId, keySystemId, drmConfig } = event;\n    console.log('ContentProtectionModule', `onBuildIntegrationRequest ${integrationId} ${keySystemId}`);\n    const factory = this.getFactory(integrationId, keySystemId);\n    if (factory) {\n      this.currentIntegration = {\n        integrationId,\n        keySystemId,\n        integration: factory.build(drmConfig),\n      };\n      NativeModules.ContentProtectionModule.onBuildProcessed({ requestId, resultString: 'success' });\n    } else {\n      NativeModules.ContentProtectionModule.onBuildProcessed({\n        requestId,\n        resultString: 'failed',\n      });\n    }\n  };\n\n  private onCertificateRequest = async (request: NativeCertificateRequest) => {\n    const { requestId, integrationId, keySystemId } = request;\n    console.log('ContentProtectionModule', `onCertificateRequest ${integrationId} ${keySystemId}`);\n    const integration = this.getIntegration(integrationId, keySystemId);\n    if (integration?.onCertificateRequest) {\n      const result = await integration.onCertificateRequest(fromNativeCertificateRequest(request));\n      // TODO: we also want to support ArrayBufferView results\n      if (isBufferSource(result)) {\n        const nativeResponse = toNativeCertificateResponseResult(requestId, integrationId, keySystemId, result as ArrayBuffer);\n        NativeModules.ContentProtectionModule.onCertificateRequestProcessedAsCertificate(nativeResponse);\n      } else if (result as CertificateRequest) {\n        const modifiedNativeRequest = toNativeCertificateRequest(requestId, integrationId, keySystemId, result as CertificateRequest);\n        NativeModules.ContentProtectionModule.onCertificateRequestProcessedAsRequest(modifiedNativeRequest);\n      }\n    } else {\n      NativeModules.ContentProtectionModule.onCertificateRequestProcessedAsRequest(request);\n    }\n  };\n\n  private onCertificateResponse = async (response: NativeCertificateResponse) => {\n    const { requestId, integrationId, keySystemId } = response;\n    console.log('ContentProtectionModule', `onCertificateResponse ${integrationId} ${keySystemId}`);\n    const integration = this.getIntegration(integrationId, keySystemId);\n    if (integration?.onCertificateResponse) {\n      const responseResult = await integration.onCertificateResponse(fromNativeCertificateResponse(response));\n      // TODO: we also want to support ArrayBufferView results\n      const modifiedNativeResponse = toNativeCertificateResponseResult(requestId, integrationId, keySystemId, responseResult as ArrayBuffer);\n      NativeModules.ContentProtectionModule.onCertificateResponseProcessed(modifiedNativeResponse);\n    } else {\n      NativeModules.ContentProtectionModule.onCertificateResponseProcessed(response);\n    }\n  };\n\n  private onLicenseRequest = async (request: NativeLicenseRequest) => {\n    const { requestId, integrationId, keySystemId } = request;\n    console.log('ContentProtectionModule', `onLicenseRequest ${integrationId} ${keySystemId}`);\n    const integration = this.getIntegration(integrationId, keySystemId);\n    // Optionally let the custom integration modify the request.\n    if (integration?.onLicenseRequest) {\n      const result = await integration.onLicenseRequest(fromNativeLicenseRequest(request));\n      // TODO: we also want to support ArrayBufferView results\n      if (isBufferSource(result)) {\n        const nativeResponse = toNativeLicenseResponseResult(requestId, integrationId, keySystemId, result as ArrayBuffer);\n        NativeModules.ContentProtectionModule.onLicenseRequestProcessedAsLicense(nativeResponse);\n      } else if (result as LicenseRequest) {\n        const modifiedNativeRequest = toNativeLicenseRequest(requestId, integrationId, keySystemId, result as LicenseRequest);\n        NativeModules.ContentProtectionModule.onLicenseRequestProcessedAsRequest(modifiedNativeRequest);\n      }\n    } else {\n      NativeModules.ContentProtectionModule.onLicenseRequestProcessedAsRequest(request);\n    }\n  };\n\n  private onLicenseResponse = async (response: NativeLicenseResponse) => {\n    const { requestId, integrationId, keySystemId } = response;\n    console.log('ContentProtectionModule', `onLicenseResponse ${integrationId} ${keySystemId}`);\n    const integration = this.getIntegration(integrationId, keySystemId);\n    if (integration?.onLicenseResponse) {\n      const responseResult = await integration.onLicenseResponse(fromNativeLicenseResponse(response));\n      // TODO: we also want to support ArrayBufferView results\n      const modifiedNativeResponse = toNativeLicenseResponseResult(requestId, integrationId, keySystemId, responseResult as ArrayBuffer);\n      NativeModules.ContentProtectionModule.onLicenseResponseProcessed(modifiedNativeResponse);\n    } else {\n      NativeModules.ContentProtectionModule.onLicenseResponseProcessed(response);\n    }\n  };\n\n  private onExtractFairplayContentId = async (event: ExtractFaiplayContentIdEvent) => {\n    const { integrationId, keySystemId, fairplaySkdUrl, requestId } = event;\n    console.log('ContentProtectionModule', `onExtractFairplayContentId ${integrationId} ${keySystemId}`);\n    const integration = this.getIntegration(integrationId, keySystemId);\n    if (integration?.extractFairplayContentId) {\n      const contentId = await integration.extractFairplayContentId(fairplaySkdUrl);\n      NativeModules.ContentProtectionModule.onExtractFairplayContentIdProcessed({\n        requestId,\n        contentId,\n      });\n    } else {\n      const contentId = fairplaySkdUrl;\n      NativeModules.ContentProtectionModule.onExtractFairplayContentIdProcessed({\n        requestId,\n        contentId,\n      });\n    }\n  };\n}\n\nexport const ContentProtectionRegistry = new NativeContentProtectionRegistry();\n"],"mappings":"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"}