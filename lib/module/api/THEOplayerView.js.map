{"version":3,"names":[],"sources":["THEOplayerView.ts"],"sourcesContent":["import type { SourceDescription } from './source/SourceDescription';\nimport type { StyleProp, ViewStyle } from 'react-native';\nimport type {\n  DurationChangeEvent,\n  ErrorEvent,\n  LoadedMetadataEvent,\n  ReadyStateChangeEvent,\n  TimeUpdateEvent,\n  ProgressEvent,\n  SegmentNotFoundEvent,\n} from './event/PlayerEvent';\nimport type { MediaTrackEvent, MediaTrackListEvent, TextTrackEvent, TextTrackListEvent } from './event/TrackEvent';\nimport type { PlayerConfiguration } from './config/PlayerConfiguration';\nimport type { ABRConfiguration } from './abr/ABRConfiguration';\nimport type { AdEvent } from './event/AdEvent';\nimport type { AdsAPI } from './ads/AdsAPI';\n\nexport interface THEOplayerViewProps {\n  /**\n   * The player configuration with THEOplayer license.\n   */\n  config?: PlayerConfiguration;\n\n  /**\n   * The player's adaptive bitrate (ABR) configuration.\n   *\n   * @remarks\n   * <br/> - This property is supported on Android & Web platforms only.\n   */\n  abrConfig?: ABRConfiguration;\n\n  /**\n   * A source description that determines the current media resource.\n   */\n  source: SourceDescription;\n\n  /**\n   * Used to set the player's paused state.\n   *\n   * @remarks\n   * <br/> - If paused is initially set to `true`, play-out will start once the source is set.\n   */\n  paused?: boolean;\n\n  /**\n   * Used to set the playback rate of the media.\n   *\n   * @example\n   * <br/> - `playbackRate = 0.70` will slow down the playback rate of the media by 30%.\n   * <br/> - `playbackRate = 1.25` will speed up the playback rate of the media by 25%.\n   *\n   * @remarks\n   * <br/> - Playback rate is represented by a number where `1` is default playback speed.\n   * <br/> - Playback rate must be a positive number.\n   * <br/> - It is recommended that you limit the range to between 0.5 and 4.\n   */\n  playbackRate?: number;\n\n  /**\n   * Used to set the volume of the audio.\n   *\n   * @remarks\n   * <br/> - Volume is represented by a floating point number between `0.0` and `1.0`.\n   */\n  volume?: number;\n\n  /**\n   * Determines whether audio is muted.\n   */\n  muted?: boolean;\n\n  /**\n   * Determines whether the player is currently playing in fullscreen.\n   */\n  fullscreen?: boolean;\n\n  /**\n   * Used to set the current selected text track by passing its `uid`, or `null` to select none.\n   */\n  selectedTextTrack?: number | null;\n\n  /**\n   * Used to set the current selected video track by passing its `uid`, or `null` to select none.\n   */\n  selectedVideoTrack?: number | null;\n\n  /**\n   * Used to set the current selected video quality by passing its `uid`, or `null` to select none.\n   */\n  targetVideoQuality?: number | number[] | undefined;\n\n  /**\n   * Used to set the current selected audio track by passing its `uid`, or `null` to select none.\n   */\n  selectedAudioTrack?: number | null;\n\n  /**\n   * The style applied to the player view.\n   */\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * Invoked before the player goes to fullscreen.\n   */\n  onFullscreenPlayerWillPresent?: () => void;\n\n  /**\n   * Invoked after the player went to fullscreen.\n   */\n  onFullscreenPlayerDidPresent?: () => void;\n\n  /**\n   * Invoked before the player returns from fullscreen.\n   */\n  onFullscreenPlayerWillDismiss?: () => void;\n\n  /**\n   * Invoked after the player returned from fullscreen.\n   */\n  onFullscreenPlayerDidDismiss?: () => void;\n\n  /**\n   * Invoked when the player's buffering state has changed.\n   *\n   * @remarks\n   * <br/> - The `isBuffering` value is typically coupled to showing/hiding a loading indicator.\n   *\n   * @param isBuffering A value that indicates whether the player is buffering.\n   */\n  onBufferingStateChange?: (isBuffering: boolean) => void;\n\n  /**\n   * Invoked when the player receives a new source description.\n   */\n  onSourceChange?: () => void;\n\n  /**\n   * Invoked when the player starts loading the manifest.\n   */\n  onLoadStart?: () => void;\n\n  /**\n   * Invoked when the player has determined the duration and dimensions of the\n   * media resource, and the text and media tracks are ready.\n   */\n  onLoadedMetadata?: (event: LoadedMetadataEvent) => void;\n\n  /**\n   * Invoked when the player can render the media data at the current playback position for the first time.\n   */\n  onLoadedData?: () => void;\n\n  /**\n   * Invoked when the player's readyState has changed.\n   */\n  onReadyStateChange?: (event: ReadyStateChangeEvent) => void;\n\n  /**\n   * Invoked when an error occurs.\n   */\n  onError?: (event: ErrorEvent) => void;\n\n  /**\n   * Invoked each time the player has loaded media data.\n   */\n  onProgress?: (event: ProgressEvent) => void;\n\n  /**\n   * Invoked when the player's internal paused state changes to `false`.\n   */\n  onPlay?: () => void;\n\n  /**\n   * Invoked when playback is ready to start after having been paused or delayed due to\n   * lack of media data.\n   */\n  onPlaying?: () => void;\n\n  /**\n   * Invoked when the player's internal paused state changes to `true`.\n   */\n  onPause?: () => void;\n\n  /**\n   * Invoked when a seek operation starts and the player is seeking a new position.\n   */\n  onSeeking?: () => void;\n\n  /**\n   * Invoked when a seek operation completed and the current playback position has changed.\n   */\n  onSeeked?: () => void;\n\n  /**\n   * Invoked when playback has stopped because the end of the media was reached or because\n   * no further data is available.\n   */\n  onEnded?: () => void;\n\n  /**\n   * Invoked each time the current playback position changed.\n   */\n  onTimeUpdate?: (event: TimeUpdateEvent) => void;\n\n  /**\n   * Invoked when the player's duration attribute has been updated.\n   */\n  onDurationChange?: (event: DurationChangeEvent) => void;\n\n  /**\n   * Invoked when a segment can not be found.\n   *\n   * @remarks\n   * <br/> - Only dispatched on DASH streams.\n   */\n  onSegmentNotFound?: (event: SegmentNotFoundEvent) => void;\n\n  /**\n   * Invoked when a text track list event occurs.\n   */\n  onTextTrackListEvent?: (event: TextTrackListEvent) => void;\n\n  /**\n   * Invoked when a text track event occurs.\n   */\n  onTextTrackEvent?: (event: TextTrackEvent) => void;\n\n  /**\n   * Invoked when a media track list event occurs.\n   */\n  onMediaTrackListEvent?: (event: MediaTrackListEvent) => void;\n\n  /**\n   * Invoked when a media track event occurs.\n   */\n  onMediaTrackEvent?: (event: MediaTrackEvent) => void;\n\n  /**\n   * Invoked when an ad event occurs.\n   */\n  onAdEvent?: (event: AdEvent) => void;\n}\n\nexport interface THEOplayerViewComponent {\n  /**\n   * Seek to a new position.\n   *\n   * @param seekTime - new time, in milliseconds.\n   */\n  seek: (seekTime: number) => void;\n\n  /**\n   * The API for advertisements.\n   */\n  ads: AdsAPI;\n}\n"],"mappings":""}