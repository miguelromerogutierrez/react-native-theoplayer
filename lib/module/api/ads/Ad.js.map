{"version":3,"names":[],"sources":["Ad.ts"],"sourcesContent":["/**\n * Represents a VAST creative. It is either a linear or non-linear ad.\n *\n * @public\n */\nimport type { AdBreak } from './AdBreak';\nimport type { CompanionAd } from 'theoplayer';\n\nexport interface Ad {\n  /**\n   * The source ad server information included in the ad response.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   */\n  adSystem: string | undefined;\n\n  /**\n   * The integration of the ad, represented by a value from the following list:\n   * <br/> - `'theo'`\n   * <br/> - `'google-ima'`\n   * <br/> - `'google-dai'`\n   * <br/> - `'freewheel'`\n   *\n   * @defaultValue `'theo'`\n   */\n  integration?: string;\n\n  /**\n   * The type of the ad, represented by a value from the following list:\n   * <br/> - `'linear'`\n   * <br/> - `'nonlinear'`\n   */\n  type: string;\n\n  /**\n   * The identifier of the creative.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   */\n  id: string | undefined;\n\n  /**\n   * The ready state of the ad.\n   */\n  readyState?: AdReadyState;\n\n  /**\n   * The ad break which the ad is part of.\n   *\n   * @remarks\n   * <br/> - Available for VAST-ads.\n   */\n  adBreak: AdBreak;\n\n  /**\n   * The duration of the ad, in seconds.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   * <br/> - Only available for LinearAd.\n   */\n  duration?: number;\n\n  /**\n   * The width of the ad, in pixels.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   */\n  width: number | undefined;\n\n  /**\n   * The height of the ad.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   */\n  height: number | undefined;\n\n  /**\n   * The URI of the the ad content.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   */\n  resourceURI?: string;\n\n  /**\n   * The website of the advertisement.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   */\n  clickThrough: string | undefined;\n\n  /**\n   * List of companions which can be displayed outside the player.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   * <br/> - Only supported for `'theo'` and `'google-dai'`.\n   */\n  companions: CompanionAd[];\n\n  /**\n   * Offset after which the ad break may be skipped, in seconds.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   * <br/> - If the offset is -1, the ad is unskippable.\n   * <br/> - If the offset is 0, the ad is immediately skippable.\n   * <br/> - Otherwise it must be a positive number indicating the offset.\n   */\n  skipOffset: number | undefined;\n\n  /**\n   * The identifier of the selected creative for the ad.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   */\n  creativeId: string | undefined;\n\n  /**\n   * The list of universal ad ID information of the selected creative for the ad.\n   *\n   * @remarks\n   * <br/> - Only supported for `'theo'` and `'google-ima'`.\n   */\n  universalAdIds: UniversalAdId[];\n}\n\n/**\n * The ad readiness state, represented by a value from the following list:\n * <br/> - `'none'`: The ad not loaded state.\n * <br/> - `'ready'`: The ad loaded state.\n *\n * @remarks\n * <br/> - An ad is loaded when the ad resource (e.g. VAST file) is downloaded.\n * <br/> - another remark\n *\n * @public\n */\nexport type AdReadyState = 'none' | 'ready';\n\n/**\n * Represents the information regarding the universal identifier of an ad.\n *\n * @public\n */\nexport interface UniversalAdId {\n  /**\n   * The registry associated with cataloging the UniversalAdId of the selected creative for the ad.\n   *\n   * @remarks\n   * <br/> - Returns the registry value, or 'unknown' if unavailable.\n   */\n  adIdRegistry: string;\n\n  /**\n   * The UniversalAdId of the selected creative for the ad.\n   *\n   * @remarks\n   * <br/> - Returns the id value or 'unknown' if unavailable.\n   */\n  adIdValue: string;\n}\n\n/**\n * Represents a non-linear ad in the VAST specification.\n *\n * @public\n */\nexport interface NonLinearAd extends Ad {\n  /**\n   * The alternative description for the ad.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   */\n  altText: string | undefined;\n\n  /**\n   * The website of the ad.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   */\n  clickThrough: string | undefined;\n\n  /**\n   * The HTML-string with the content of the ad.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   */\n  contentHTML: string | undefined;\n}\n\n/**\n * The delivery type of the ad content file, represented by a value from the following list:\n * <br/> - `'progressive'`: Delivered through progressive download protocols (e.g. HTTP).\n * <br/> - `'streaming'`: Delivered through streaming download protocols.\n *\n * @remarks\n * <br/> - `'streaming'` is currently not supported.\n *\n * @public\n */\nexport type DeliveryType = 'progressive' | 'streaming';\n\n/**\n * Represents metadata of an media file with ad content.\n *\n * @remarks\n * <br/> - This metadata is retrieved from the VAST file.\n *\n * @public\n */\nexport interface MediaFile {\n  /**\n   * The delivery type of the video file.\n   */\n  delivery: DeliveryType;\n\n  /**\n   * The MIME type for the file container.\n   */\n  type: string;\n\n  /**\n   * The native width of the video file, in pixels.\n   */\n  width: number;\n\n  /**\n   * The native height of the video file, in pixels.\n   */\n  height: number;\n\n  /**\n   * The URI of the VAST content.\n   */\n  contentURL: string;\n}\n\n/**\n * Represents a linear ad in the VAST specification.\n *\n * @public\n */\nexport interface LinearAd extends Ad {\n  /**\n   * The duration of the ad, in seconds.\n   *\n   * @remarks\n   * <br/> - Available when the {@link Ad.readyState} is `'ready'`.\n   */\n  duration: number;\n\n  /**\n   * List of media files which contain metadata about ad video files.\n   */\n  mediaFiles: MediaFile[];\n}\n"],"mappings":""}